Hey,I am Aakash Tamboli I am the Creator of this Library. It is Collection Some 
Sorting Algos and DataStructure....
1)BubbleSort (Only For array-Collection NO LINKED LIST RIGHT NOW)
	=>The Bubble Sort Algo Take 6 Arguments
	    a) Base Address of Collection
	    b) value of lowerBound
	    c) value of upperbound
	    d) size of 1 Element
	    e) pass address of struct errorCode type structure
	    f) address of the comparator function {boolian predicate}
	=>Comparator Function
	*This Comparator function are written by Who wants to use the 
	  libaray..
Guidlines for Comparator Function(boolian predicate)-
1)return type always int type;
2)parameter Should always (void *,void *).
3)if left pointer points to data is EQAUL to right pointer points data then
return 0
4)if left pointer pointer data is greater then return +ve;
5)if letf pointer pointer data is lesser them return -ve
ex:
int  comparator_name(void *,void *);
		      ^       ^
		      |         |
		it act like  it act like
	          left operand  right operand
Here is Acutall Example to use this library;
#include<stdio.h>
#include<stdlib.h>
#include<algo.h>
int INTComparator(void *left,void *right)
{
int *i,*j;
i=(int *)left;
j=(int *)right;
return (*i)-(*j);
}
int main()
{
ErrorCode error;
int *x,req;
int i;
printf("enter the requiremnt: ");
scanf("%d",&req);
if(req<=0)
{
printf("Invaild request\n");
return 0;
}
x=(int *)malloc(sizeof(int)*req);
if(x==NULL)
{
printf("insuffient space in memory\n");
return 0;
}
for(i=0;i<req;i++)
{
printf("Enter an Number: ");
scanf("%d",&x[i]);
}
bubbleSort(x,0,req-1,sizeof(int),&error,INTComparator);
if(error.succ==false)
{
printf("I unable to Sort Your collection,Check Error Code\n");
printf("Error code is: %d\n",error.code);
free(x);
return 0;
}
else
{
for(i=0;i<req;i++) printf("%d\n",x[i]);
free(x);
}
return 0;
}
Here is Another Example Where we Sort Struct student type Data

#include<stdio.h>
#include<stdlib.h>
#include<algo.h>

typedef struct student
{
int roll;
char name[32];
}Student;

int studentComparator(void *left,void *right) // (boolian predicate)
{
Student *s1,*s2;
s1=(Student *)left;
s2=(Student *)right;
return s1->roll-s2->roll;
}
int main()
{
ErrorCode error;
Student *s,*j;
int req;
int i;
int sizeOfOneElement;
printf("enter the requiremnt: ");
scanf("%d",&req);
if(req<=0)
{
printf("Invaild request\n");
return 0;
}
s=(Student *)malloc(sizeof(Student)*req);
j=s;
if(s==NULL)
{
printf("insuffient space in memory\n");
return 0;
}
for(i=0;i<req;i++)
{
printf("Enter the Roll Number: ");
scanf("%d",&j->roll);
printf("Enter the name: ");
scanf("%s",&j->name);
j++;
}
sizeOfOneElement=sizeof(Student);
bubbleSort(s,0,req-1,sizeOfOneElement,&error,studentComparator);
if(error.succ==false)
{
printf("I unable to Sort Your collection,Check Error Code\n");
printf("Error code is: %d\n",error.code);
free(s);
return 0;
}
else
{
for(i=0;i<req;i++) printf("Name: %s,RollNumber: %d\n",s[i].name,s[i].roll);
free(s);
}
return 0;
}
2)LinearSort (Only For array-Collection NO LINKED LIST RIGHT NOW)
	=>The Linear Sort Algo Take 6 Arguments
	    a) Base Address of Collection
	    b) value of lowerbound
	    c) value of upperbound
	    d) size of 1 Element
	    e) pass address of struct ErrorCode type structure
	    f) address of the comparator function (boolian predicate)
	=>Comparator Function
	*This Comparator function are written by Who wants to use the 
	  libaray..
Guidlines for Comparator Function (boolian predicate)-
1)return type always int type;
2)parameter Should always (void *,void *).
3)if left pointer points to data is EQAUL to right pointer points data then
return 0
4)if left pointer pointer data is greater then return +ve;
5)if letf pointer pointer data is lesser them return -ve
ex:
int  comparator_name(void *,void *);
		      ^       ^
		      |         |
		it act like  it act like
	          left operand  right operand
Here is Acutall Example to use this library;
#include<stdio.h>
#include<stdlib.h>
#include<algo.h>
int INTComparator(void *left,void *right)
{
int *i,*j;
i=(int *)left;
j=(int *)right;
return (*i)-(*j);
}
int main()
{
ErrorCode err;
int *x,req,i;
printf("Enter your requirement: ");
scanf("%d",&req);
if(req<=0) return 0;
x=(int *)malloc(sizeof(int)*req);
if(x==NULL) return 0;
for(i=0;i<req;i++)
{
printf("Enter a Number: ");
scanf("%d",&x[i]);
}
printf("Sorting Using Linear Sort\n");
linearSort(x,0,req-1,sizeof(int),&err,INTComparator); 
if(err.succ==true) printf("Your collection is successfully\n");
else printf("unable to sort your collection check on error code %d\n",err.code);
for(i=0;i<req;i++) printf("Element: %d\n",x[i]);
free(x);
return 0;
}
3)Selection Sort (Only For array-Collection NO LINKED LIST RIGHT NOW)
	=>The Selection Algo Take 6 Arguments
	    a) Base Address of Collection
	    b) value of lowerbound
	    c) value of upperbound
	    d) size of 1 Element
	    e) pass address of struct ErrorCode type structure
	    f) address of the comparator function (boolian predicate)
	=>Comparator Function
	*This Comparator function are written by Who wants to use the 
	  libaray..
Guidlines for Comparator Function(boolian predicate)-
1)return type always int type;
2)parameter Should always (void *,void *).
3)if left pointer points to data is EQAUL to right pointer points data then
return 0
4)if left pointer pointer data is greater then return +ve;
5)if letf pointer pointer data is lesser them return -ve
ex:
int  comparator_name(void *,void *);
		      ^       ^
		      |         |
		it act like  it act like
	          left operand  right operand
Here is Acutall Example to use this library;
#include<stdio.h>
#include<algo.h>
#include<stdlib.h>
int INTComparator(void *left,void *right)
{
int *i,*j;
i=(int *)left;
j=(int *)right;
return (*i)-(*j);
}
int main()
{
ErrorCode err;
int *x,req,i;
printf("Enter your requirement: ");
scanf("%d",&req);
if(req<=0) return 0;
x=(int *)malloc(sizeof(int)*req);
if(x==NULL) return 0;
for(i=0;i<req;i++)
{
printf("Enter the Number: ");
scanf("%d",&x[i]);
}
selectionSort(x,0,req-1,sizeof(int),&err,INTComparator);
if(err.succ==false) printf("Something Wrong\n");
for(i=0;i<req;i++) printf("%d\n",x[i]);
free(x);
return 0;
}
4)Insertion Sort (Only For array-Collection NO LINKED LIST RIGHT NOW)
	=>The Insertion Sort Algo Take 4 Arguments
	    a) Base Address of Collection
	    b) Lower Bound where starting index is 0 negative indices not allowed
	    c) upper Bound where last Element is Included. Out of Boundation causing you error.
	    d) size of 1 Element
	    e) pass address of struct ErrorCode type structure
	    f) address of the comparator function (boolian predicate)
	=>Comparator Function
	*This Comparator function are written by Who wants to use the 
	  libaray..
Guidlines for Comparator Function(boolian predicate)-
1)return type always int type;
2)parameter Should always (void *,void *).
3)if left pointer points to data is EQAUL to right pointer points data then
return 0
4)if left pointer pointer data is greater then return +ve;
5)if letf pointer pointer data is lesser them return -ve
ex:
int  comparator_name(void *,void *);
		      ^       ^
		      |         |
		it act like  it act like
	          left operand  right operand
Here is Acutall Example to use this library;
#include<stdio.h>
#include<algo.h>
#include<stdlib.h>
int INTComparator(void *left,void *right)
{
int *i,*j;
i=(int *)left;
j=(int *)right;
return (*i)-(*j);
}
int main()
{
ErrorCode err;
int *x,req,i;
printf("Enter yout requirment: ");
scanf("%d",&req);
if(req<=0) return 0;
x=(int *)malloc(sizeof(int)*req);
for(i=0;i<req;i++)
{
printf("Enter an Number: ");
scanf("%d",&x[i]);
}
printf("using Insertion Sort\n");
insertionSort(ptr,0,req-1,sizeof(int),&err,INTComparator);
if(err.succ==false) printf("Something wrong check error code\n");
else printf("Your collection is sorted\n");
for(i=0;i<req;i++) printf("%d\n",x[i]);
free(x);
return 0;
}
5)Quick Sort (Only For array-Collection NO LINKED LIST RIGHT NOW)
	=>The Quick Sort Algo Take 4 Arguments
	    a) Base Address of Collection
	    b) Lower Bound where starting index is 0 negative indices not allowed
	    c) upper Bound where last Element is Included. Out of Boundation causing you error.
	    d) size of 1 Element
	    e) pass address of struct ErrorCode type structure
	    f) address of the comparator function {boolian predicate}
	=>Comparator Function
	*This Comparator function are written by Who wants to use the 
	  libaray..
Guidlines for Comparator Function(boolian predicate)-
1)return type always int type;
2)parameter Should always (void *,void *).
3)if left pointer points to data is EQAUL to right pointer points data then
return 0
4)if left pointer pointer data is greater then return +ve;
5)if letf pointer pointer data is lesser them return -ve
ex:
int  comparator_name(void *,void *); (boolian predicate)
		      ^       ^
		      |         |
		it act like  it act like
	          left operand  right operand
Here is Acutall Example to use this library;
#include<stdio.h>
#include<stdlib.h>
#include<algo.h>
int INTComparator(void *left,void *right)
{
int *i,*j;
i=(int *)left;
j=(int *)right;
return (*i)-(*j);
}
int main()
{
ErrorCode err;
int *x,req,i;
printf("Enter your requirement: ");
scanf("%d",&req);
if(req<=0) return 0;
x=(int *)malloc(sizeof(int)*req);
if(x==NULL) return 0;
for(i=0;i<req;i++)
{
printf("Enter an Number :");
scanf("%d",&x[i]);
}
quickSort(x,0,req-1,sizeof(int),&err,INTComparator);
if(err.succ) printf("Your collection is sorted\n");
else printf("Something wrong error code is: %d\n",err.code);
for(i=0;i<req;i++) printf("%d\n",x[i]);
return 0;
}
5)Merge Sort (Only For array-Collection NO LINKED LIST RIGHT NOW)
	=>The Merge Sort Algo Take 4 Arguments
	    a) Base Address of Collection
	    b) Lower Bound where starting index is 0 negative indices not allowed
	    c) upper Bound where last Element is Included. Out of Boundation causing you error.
	    d) size of 1 Element
	    e) pass address of struct ErrorCode type structure
	    f) address of the comparator function {boolian predicate}
	=>Comparator Function
	*This Comparator function are written by Who wants to use the 
	  libaray..
Guidlines for Comparator Function(boolian predicate)-
1)return type always int type;
2)parameter Should always (void *,void *).
3)if left pointer points to data is EQAUL to right pointer points data then
return 0
4)if left pointer pointer data is greater then return +ve;
5)if letf pointer pointer data is lesser them return -ve
ex:
int  comparator_name(void *,void *); (boolian predicate)
		      ^       ^
		      |         |
		it act like  it act like
	          left operand  right operand
Here is Acutall Example to use this library;
#include<stdio.h>
#include<stdlib.h>
#include<algo.h>
int INTComparator(void *left,void *right)
{
int *i,*j;
i=(int *)left;
j=(int *)right;
return (*i)-(*j);
}
int main()
{
ErrorCode err;
int *x,req,i;
printf("Enter your requirement: ");
scanf("%d",&req);
fflush(stdin);
if(req<=0) return 0;
x=(int *)malloc(sizeof(int)*req);
for(i=0;i<req;i++)
{
printf("Enter an Number: ");
scanf("%d",&x[i]);
fflush(stdin);
}
mergeSort(x,0,req-1,sizeof(int),&err,INTComparator);
if(err.succ) printf("your collection is Sorted\n");
else printf("something wrong check error code\n");
for(i=0;i<req;i++) printf("%d\n",x[i]);
free(x);
return 0;
}

7)toMaxHeap (Only For array type-Collection NO LINKED LIST)
	=>The toMaxHeap Algo Take 4 Arguments
	    a) Base Address of Collection
	    b) Lower Bound where starting index is 0 negative indices not allowed
	    c) upper Bound where last Element is Included. Out of Boundation causing you error.
	    d) size of 1 Element
	    e) pass address of struct ErrorCode type structure
	    f) address of the comparator function {boolian predicate}
	=>Comparator Function
	*This Comparator function are written by Who wants to use the 
	  libaray..
Guidlines for Comparator Function(boolian predicate)-
1)return type always int type;
2)parameter Should always (void *,void *).
3)if left pointer points to data is EQAUL to right pointer points data then
return 0
4)if left pointer pointer data is greater then return +ve;
5)if letf pointer pointer data is lesser them return -ve
ex:
int  comparator_name(void *,void *); (boolian predicate)
		      ^       ^
		      |         |
		it act like  it act like
	          left operand  right operand
Here is Acutall Example to use this library;
#include<stdio.h>
#include<algo.h>
#include<stdlib.h>
int INTComparator(void *left,void *right)
{
int *i,*j;
i=(int *)left;
j=(int *)right;
return (*i)-(*j);
}
int main()
{
ErrorCode err;
int *x,req,i;
printf("Enter your requirement: ");
scanf("%d",&req);
if(req<=0) return 0;
x=(int *)malloc(sizeof(int)*req);
if(x==NULL) return 0;
for(i=0;i<req;i++)
{
printf("Enter a Number: ");
scanf("%d",&x[i]);
}
printf("Convert Into Max Heap\n");
toMaxHeap(x,4,9,sizeof(int),&err,INTComparator);
if(err.succ==true) printf("Your collection is successfully converted\n");
else printf("unable to convert your collection check on error code %d\n",err.code);
for(i=0;i<req;i++) printf("Element: %d\n",x[i]);
free(x);
return 0;
}

7)toMaxHeap (Only For array type-Collection NO LINKED LIST)
	=>The toMaxHeap Algo Take 4 Arguments
	    a) Base Address of Collection
	    b) Lower Bound where starting index is 0 negative indices not allowed
	    c) upper Bound where last Element is Included. Out of Boundation causing you error.
	    d) size of 1 Element
	    e) pass address of struct ErrorCode type structure
	    f) address of the comparator function {boolian predicate}
	=>Comparator Function
	*This Comparator function are written by Who wants to use the 
	  libaray..
Guidlines for Comparator Function(boolian predicate)-
1)return type always int type;
2)parameter Should always (void *,void *).
3)if left pointer points to data is EQAUL to right pointer points data then
return 0
4)if left pointer pointer data is greater then return +ve;
5)if letf pointer pointer data is lesser them return -ve
ex:
int  comparator_name(void *,void *); (boolian predicate)
		      ^       ^
		      |         |
		it act like  it act like
	          left operand  right operand
Here is Acutall Example to use this library;
#include<stdio.h>
#include<algo.h>
#include<stdlib.h>
int INTComparator(void *left,void *right)
{
int *i,*j;
i=(int *)left;
j=(int *)right;
return (*i)-(*j);
}
int main()
{
ErrorCode err;
int *x,req,i;
printf("Enter your requirement: ");
scanf("%d",&req);
if(req<=0) return 0;
x=(int *)malloc(sizeof(int)*req);
if(x==NULL) return 0;
for(i=0;i<req;i++)
{
printf("Enter a Number: ");
scanf("%d",&x[i]);
}
printf("Convert Into Max Heap\n");
toMaxHeap(x,4,9,sizeof(int),&err,INTComparator);
if(err.succ==true) printf("Your collection is successfully converted\n");
else printf("unable to convert your collection check on error code %d\n",err.code);
for(i=0;i<req;i++) printf("Element: %d\n",x[i]);
free(x);
return 0;
}

8)Heap Sort (Only For array type-Collection NO LINKED LIST)
	=>The Heap Sort Algo Take 4 Arguments
	    a) Base Address of Collection
	    b) Lower Bound where starting index is 0 negative indices not allowed
	    c) upper Bound where last Element is Included. Out of Boundation causing you error.
	    d) size of 1 Element
	    e) pass address of struct ErrorCode type structure
	    f) address of the comparator function {boolian predicate}
	=>Comparator Function
	*This Comparator function are written by Who wants to use the 
	  libaray..
Guidlines for Comparator Function(boolian predicate)-
1)return type always int type;
2)parameter Should always (void *,void *).
3)if left pointer points to data is EQAUL to right pointer points data then
return 0
4)if left pointer pointer data is greater then return +ve;
5)if letf pointer pointer data is lesser them return -ve
ex:
int  comparator_name(void *,void *); (boolian predicate)
		      ^       ^
		      |         |
		it act like  it act like
	          left operand  right operand
Here is Acutall Example to use this library;
#include<stdio.h>
#include<stdlib.h>
#include<algo.h>
int INTComparator(void *left,void *right)
{
int *i,*j;
i=(int *)left;
j=(int *)right;
return (*i)-(*j);
}
int main()
{
ErrorCode err;
int *x,req,i;
printf("Enter your requirement: ");
scanf("%d",&req);
if(req<=0) return 0;
x=(int *)malloc(sizeof(int)*req);
if(x==NULL) return 0;
for(i=0;i<req;i++)
{
printf("Enter a Number: ");
scanf("%d",&x[i]);
}
printf("Sorting Using heap Sort\n");
heapSort(x,0,req-1,sizeof(int),&err,INTComparator);
if(err.succ==true) printf("Your collection is successfully\n");
else printf("unable to sort your collection check on error code %d\n",err.code);
for(i=0;i<req;i++) printf("Element: %d\n",x[i]);
free(x);
return 0;
}
9)RadixSort (Only int data type)
	=>The Radix Sort Algo Take 5 Arguments
	    a) Base Address of Collection
	    b) value of lowerBound
	    c) value of upperbound
	    d) size of 1 Element
	    e) pass address of struct errorCode type structure
	=>Comparator Function
	*This Comparator function are written by Who wants to use the 
	  libaray..
Guidlines for Comparator Function(boolian predicate)-
1)return type always int type;
2)parameter Should always (void *,void *).
3)if left pointer points to data is EQAUL to right pointer points data then
return 0
4)if left pointer pointer data is greater then return +ve;
5)if letf pointer pointer data is lesser them return -ve
ex:
int  comparator_name(void *,void *);
		      ^       ^
		      |         |
		it act like  it act like
	          left operand  right operand
Here is Acutall Example to use this library;
#include<stdio.h>
#include<stdlib.h>
#include<algo.h>
int main()
{
ErrorCode err;
int *x,req,i;
printf("Enter your requirement: ");
scanf("%d",&req);
if(req<=0) return 0;
x=(int *)malloc(sizeof(int)*req);
if(x==NULL) return 0;
for(i=0;i<req;i++)
{
printf("Enter a Number: ");
scanf("%d",&x[i]);
fflush(stdin);
}
printf("Sorting Using Radix Sort\n");
radixSort(x,0,req-1,sizeof(int),&err);
if(err.succ==true) printf("Your collection is successfully\n");
else printf("unable to sort your collection check on error code %d\n",err.code);
for(i=0;i<req;i++) printf("Element: %d\n",x[i]);
free(x);
return 0;
}
10)Shell Sort (Only For array-Collection NO LINKED LIST RIGHT NOW)
	=>The Insertion Sort Algo Take 4 Arguments
	    a) Base Address of Collection
	    b) Lower Bound where starting index is 0 negative indices not allowed
	    c) upper Bound where last Element is Included. Out of Boundation causing you error.
	    d) size of 1 Element
	    e) pass address of struct ErrorCode type structure
	    f) address of the comparator function (boolian predicate)
	=>Comparator Function
	*This Comparator function are written by Who wants to use the 
	  libaray..
Guidlines for Comparator Function(boolian predicate)-
1)return type always int type;
2)parameter Should always (void *,void *).
3)if left pointer points to data is EQAUL to right pointer points data then
return 0
4)if left pointer pointer data is greater then return +ve;
5)if letf pointer pointer data is lesser them return -ve
ex:
int  comparator_name(void *,void *);
		      ^       ^
		      |         |
		it act like  it act like
	          left operand  right operand
Here is Acutall Example to use this library;
#include<stdio.h>
#include<algo.h>
#include<stdlib.h>
int INTComparator(void *left,void *right)
{
int *i,*j;
i=(int *)left;
j=(int *)right;
return (*i)-(*j);
}
int main()
{
ErrorCode err;
int *x,req,i;
printf("Enter yout requirment: ");
scanf("%d",&req);
if(req<=0) return 0;
x=(int *)malloc(sizeof(int)*req);
for(i=0;i<req;i++)
{
printf("Enter an Number: ");
scanf("%d",&x[i]);
}
printf("using shell Sort\n");
shellSort(x,4,req-1,sizeof(int),&err,INTComparator);
if(err.succ==false) printf("Something wrong check error code\n");
else printf("Your collection is sorted\n");
for(i=0;i<req;i++) printf("%d\n",x[i]);
free(x);
return 0;
}
*******************
11)FindTheHeavestElement (Only For array-Collection NO LINKED LIST RIGHT NOW)
	=>The FindTheHeavestElement Algo Take 4 Arguments
	    a) Base Address of Collection
	    b) Lower Bound where starting index is 0 negative indices not allowed
	    c) upper Bound where last Element is Included. Out of Boundation causing you error.
	    d) size of 1 Element
	    e) pass address of struct ErrorCode type structure
       f) pass address of one Element,In this element you will see the heavest element in your collection
	    g) address of the comparator function (boolian predicate)
	=>Comparator Function
	*This Comparator function are written by Who wants to use the 
	  libaray..
Guidlines for Comparator Function(boolian predicate)-
1)return type always int type;
2)parameter Should always (void *,void *).
3)if left pointer points to data is EQAUL to right pointer points data then
return 0
4)if left pointer pointer data is greater then return +ve;
5)if letf pointer pointer data is lesser them return -ve
ex:
int  comparator_name(void *,void *);
		      ^       ^
		      |         |
		it act like  it act like
	          left operand  right operand
Here is Acutall Example to use this library;
#include<stdio.h>
#include<common.h>
#include<algo.h>
#include<stdlib.h>
int comparator(void *left,void *right)
{
int *i,*j;
i=(int *)left;
j=(int *)right;
return (*i)-(*j);
}
int main()
{
ErrorCode err;
int *x,req,i;
int h;
printf("Enter your requirement: ");
scanf("%d",&req);
fflush(stdin);
if(req<=0) return 0;
x=(int *)malloc(sizeof(int)*req);
for(i=0;i<req;i++)
{
printf("Enter an Number: ");
scanf("%d",&x[i]);
fflush(stdin);
}
findingTheHeavestElement(x,0,req-1,sizeof(int),&err,&h,comparator);
if(err.succ) printf("%d is Heavest Element",h);
else printf("Something Wrong\n");
free(x);
return 0;
}
12)FindTheLightestElement (Only For array-Collection NO LINKED LIST RIGHT NOW)
	=>The FindTheLightestElement Algo Take 4 Arguments
	    a) Base Address of Collection
	    b) Lower Bound where starting index is 0 negative indices not allowed
	    c) upper Bound where last Element is Included. Out of Boundation causing you error.
	    d) size of 1 Element
	    e) pass address of struct ErrorCode type structure
       f) pass address of one Element,In this element you will see the Lightest element in your collection
	    g) address of the comparator function (boolian predicate)
	=>Comparator Function
	*This Comparator function are written by Who wants to use the 
	  libaray..
Guidlines for Comparator Function(boolian predicate)-
1)return type always int type;
2)parameter Should always (void *,void *).
3)if left pointer points to data is EQAUL to right pointer points data then
return 0
4)if left pointer pointer data is greater then return +ve;
5)if letf pointer pointer data is lesser them return -ve
ex:
int  comparator_name(void *,void *);
		      ^       ^
		      |         |
		it act like  it act like
	          left operand  right operand
Here is Acutall Example to use this library;
#include<stdio.h>
#include<common.h>
#include<algo.h>
#include<stdlib.h>
int comparator(void *left,void *right)
{
int *i,*j;
i=(int *)left;
j=(int *)right;
return (*i)-(*j);
}
int main()
{
ErrorCode err;
int *x,req,i;
int lightestElement;
printf("Enter your requirement: ");
scanf("%d",&req);
fflush(stdin);
if(req<=0) return 0;
x=(int *)malloc(sizeof(int)*req);
for(i=0;i<req;i++)
{
printf("Enter an Number: ");
scanf("%d",&x[i]);
fflush(stdin);
}
findingTheLightestElement(x,0,req-1,sizeof(int),&err,&lightestElement,comparator);
if(err.succ) printf("%d is Lighest Element",lightestElement);
else printf("Something Wrong\n");
free(x);
return 0;
}